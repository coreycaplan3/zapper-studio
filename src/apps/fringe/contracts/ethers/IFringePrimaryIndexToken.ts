/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IFringePrimaryIndexToken {
  export type BorrowPositionStruct = {
    loanBody: BigNumberish;
    accrual: BigNumberish;
  };

  export type BorrowPositionStructOutput = [BigNumber, BigNumber] & {
    loanBody: BigNumber;
    accrual: BigNumber;
  };

  export type DepositPositionStruct = {
    depositedProjectTokenAmount: BigNumberish;
  };

  export type DepositPositionStructOutput = [BigNumber] & {
    depositedProjectTokenAmount: BigNumber;
  };

  export type LendingTokenInfoStruct = {
    isListed: boolean;
    isPaused: boolean;
    bLendingToken: string;
  };

  export type LendingTokenInfoStructOutput = [boolean, boolean, string] & {
    isListed: boolean;
    isPaused: boolean;
    bLendingToken: string;
  };

  export type RatioStruct = {
    numerator: BigNumberish;
    denominator: BigNumberish;
  };

  export type RatioStructOutput = [number, number] & {
    numerator: number;
    denominator: number;
  };

  export type ProjectTokenInfoStruct = {
    isListed: boolean;
    isPaused: boolean;
    loanToValueRatio: IFringePrimaryIndexToken.RatioStruct;
    liquidationThresholdFactor: IFringePrimaryIndexToken.RatioStruct;
    liquidationIncentive: IFringePrimaryIndexToken.RatioStruct;
  };

  export type ProjectTokenInfoStructOutput = [
    boolean,
    boolean,
    IFringePrimaryIndexToken.RatioStructOutput,
    IFringePrimaryIndexToken.RatioStructOutput,
    IFringePrimaryIndexToken.RatioStructOutput
  ] & {
    isListed: boolean;
    isPaused: boolean;
    loanToValueRatio: IFringePrimaryIndexToken.RatioStructOutput;
    liquidationThresholdFactor: IFringePrimaryIndexToken.RatioStructOutput;
    liquidationIncentive: IFringePrimaryIndexToken.RatioStructOutput;
  };
}

export interface IFringePrimaryIndexTokenInterface extends utils.Interface {
  contractName: "IFringePrimaryIndexToken";
  functions: {
    "MODERATOR_ROLE()": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "borrowLimit(address,address)": FunctionFragment;
    "borrowPosition(address,address,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "depositPosition(address,address,address)": FunctionFragment;
    "getPosition(address,address,address)": FunctionFragment;
    "getProjectTokenEvaluation(address,uint256)": FunctionFragment;
    "healthFactor(address,address,address)": FunctionFragment;
    "lendingTokenInfo(address)": FunctionFragment;
    "lendingTokens(uint256)": FunctionFragment;
    "lendingTokensLength()": FunctionFragment;
    "liquidate(address,address,address)": FunctionFragment;
    "liquidationThreshold(address,address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "pit(address,address,address)": FunctionFragment;
    "pitRemaining(address,address,address)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "projectTokenInfo(address)": FunctionFragment;
    "projectTokens(uint256)": FunctionFragment;
    "projectTokensLength()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "redeemUnderlying(address,uint256)": FunctionFragment;
    "repay(address,address,uint256)": FunctionFragment;
    "supply(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBorrow(address,address)": FunctionFragment;
    "totalDepositedProjectToken(address)": FunctionFragment;
    "totalOutstanding(address,address,address)": FunctionFragment;
    "updateInterestInBorrowPositions(address,address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MODERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectTokenEvaluation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactor",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationThreshold",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pit",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pitRemaining",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "projectTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projectTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDepositedProjectToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstanding",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInterestInBorrowPositions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MODERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectTokenEvaluation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pitRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDepositedProjectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstanding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInterestInBorrowPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddPrjToken(address)": EventFragment;
    "Deposit(address,address,uint256,address)": EventFragment;
    "LiquidationThresholdFactorSet(address,uint8,uint8)": EventFragment;
    "LoanToValueRatioSet(address,uint8,uint8)": EventFragment;
    "Withdraw(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPrjToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidationThresholdFactorSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanToValueRatioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddPrjTokenEvent = TypedEvent<[string], { tokenPrj: string }>;

export type AddPrjTokenEventFilter = TypedEventFilter<AddPrjTokenEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, string],
  {
    who: string;
    tokenPrj: string;
    prjDepositAmount: BigNumber;
    beneficiar: string;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type LiquidationThresholdFactorSetEvent = TypedEvent<
  [string, number, number],
  { tokenPrj: string; ltfNumerator: number; ltfDenominator: number }
>;

export type LiquidationThresholdFactorSetEventFilter =
  TypedEventFilter<LiquidationThresholdFactorSetEvent>;

export type LoanToValueRatioSetEvent = TypedEvent<
  [string, number, number],
  { tokenPrj: string; lvrNumerator: number; lvrDenominator: number }
>;

export type LoanToValueRatioSetEventFilter =
  TypedEventFilter<LoanToValueRatioSetEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, string],
  {
    who: string;
    tokenPrj: string;
    prjWithdrawAmount: BigNumber;
    beneficiar: string;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IFringePrimaryIndexToken extends BaseContract {
  contractName: "IFringePrimaryIndexToken";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFringePrimaryIndexTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MODERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowLimit(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrowPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[IFringePrimaryIndexToken.BorrowPositionStructOutput]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[IFringePrimaryIndexToken.DepositPositionStructOutput]>;

    getPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositedProjectTokenAmount: BigNumber;
        loanBody: BigNumber;
        accrual: BigNumber;
        healthFactorNumerator: BigNumber;
        healthFactorDenominator: BigNumber;
      }
    >;

    getProjectTokenEvaluation(
      projectToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    healthFactor(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    lendingTokenInfo(
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[IFringePrimaryIndexToken.LendingTokenInfoStructOutput]>;

    lendingTokens(
      lendingTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lendingTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidationThreshold(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pit(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pitRemaining(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    projectTokenInfo(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<[IFringePrimaryIndexToken.ProjectTokenInfoStructOutput]>;

    projectTokens(
      projectTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    projectTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeem(
      lendingToken: string,
      bLendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supply(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBorrow(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDepositedProjectToken(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalOutstanding(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateInterestInBorrowPositions(
      account: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MODERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  borrow(
    projectToken: string,
    lendingToken: string,
    lendingTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowLimit(
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrowPosition(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<IFringePrimaryIndexToken.BorrowPositionStructOutput>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    projectToken: string,
    lendingToken: string,
    projectTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositPosition(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<IFringePrimaryIndexToken.DepositPositionStructOutput>;

  getPosition(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      depositedProjectTokenAmount: BigNumber;
      loanBody: BigNumber;
      accrual: BigNumber;
      healthFactorNumerator: BigNumber;
      healthFactorDenominator: BigNumber;
    }
  >;

  getProjectTokenEvaluation(
    projectToken: string,
    projectTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  healthFactor(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  lendingTokenInfo(
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<IFringePrimaryIndexToken.LendingTokenInfoStructOutput>;

  lendingTokens(
    lendingTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  lendingTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidationThreshold(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  pit(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pitRemaining(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  projectTokenInfo(
    projectToken: string,
    overrides?: CallOverrides
  ): Promise<IFringePrimaryIndexToken.ProjectTokenInfoStructOutput>;

  projectTokens(
    projectTokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  projectTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    lendingToken: string,
    bLendingTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    lendingToken: string,
    lendingTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    projectToken: string,
    lendingToken: string,
    lendingTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supply(
    lendingToken: string,
    lendingTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBorrow(
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalDepositedProjectToken(
    projectToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalOutstanding(
    account: string,
    projectToken: string,
    lendingToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateInterestInBorrowPositions(
    account: string,
    lendingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    projectToken: string,
    lendingToken: string,
    projectTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MODERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    borrow(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowLimit(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<IFringePrimaryIndexToken.BorrowPositionStructOutput>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<IFringePrimaryIndexToken.DepositPositionStructOutput>;

    getPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositedProjectTokenAmount: BigNumber;
        loanBody: BigNumber;
        accrual: BigNumber;
        healthFactorNumerator: BigNumber;
        healthFactorDenominator: BigNumber;
      }
    >;

    getProjectTokenEvaluation(
      projectToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    healthFactor(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    lendingTokenInfo(
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<IFringePrimaryIndexToken.LendingTokenInfoStructOutput>;

    lendingTokens(
      lendingTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    lendingTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationThreshold(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pit(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pitRemaining(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    projectTokenInfo(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<IFringePrimaryIndexToken.ProjectTokenInfoStructOutput>;

    projectTokens(
      projectTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    projectTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      lendingToken: string,
      bLendingTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemUnderlying(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supply(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBorrow(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDepositedProjectToken(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutstanding(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateInterestInBorrowPositions(
      account: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPrjToken(address)"(tokenPrj?: string | null): AddPrjTokenEventFilter;
    AddPrjToken(tokenPrj?: string | null): AddPrjTokenEventFilter;

    "Deposit(address,address,uint256,address)"(
      who?: string | null,
      tokenPrj?: string | null,
      prjDepositAmount?: null,
      beneficiar?: string | null
    ): DepositEventFilter;
    Deposit(
      who?: string | null,
      tokenPrj?: string | null,
      prjDepositAmount?: null,
      beneficiar?: string | null
    ): DepositEventFilter;

    "LiquidationThresholdFactorSet(address,uint8,uint8)"(
      tokenPrj?: string | null,
      ltfNumerator?: null,
      ltfDenominator?: null
    ): LiquidationThresholdFactorSetEventFilter;
    LiquidationThresholdFactorSet(
      tokenPrj?: string | null,
      ltfNumerator?: null,
      ltfDenominator?: null
    ): LiquidationThresholdFactorSetEventFilter;

    "LoanToValueRatioSet(address,uint8,uint8)"(
      tokenPrj?: string | null,
      lvrNumerator?: null,
      lvrDenominator?: null
    ): LoanToValueRatioSetEventFilter;
    LoanToValueRatioSet(
      tokenPrj?: string | null,
      lvrNumerator?: null,
      lvrDenominator?: null
    ): LoanToValueRatioSetEventFilter;

    "Withdraw(address,address,uint256,address)"(
      who?: string | null,
      tokenPrj?: string | null,
      prjWithdrawAmount?: null,
      beneficiar?: string | null
    ): WithdrawEventFilter;
    Withdraw(
      who?: string | null,
      tokenPrj?: string | null,
      prjWithdrawAmount?: null,
      beneficiar?: string | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MODERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowLimit(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProjectTokenEvaluation(
      projectToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    healthFactor(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingTokenInfo(
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingTokens(
      lendingTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidationThreshold(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pit(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pitRemaining(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    projectTokenInfo(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectTokens(
      projectTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    projectTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      lendingToken: string,
      bLendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUnderlying(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supply(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDepositedProjectToken(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutstanding(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateInterestInBorrowPositions(
      account: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MODERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowLimit(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectTokenEvaluation(
      projectToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    healthFactor(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingTokenInfo(
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingTokens(
      lendingTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidationThreshold(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pit(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pitRemaining(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectTokenInfo(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectTokens(
      projectTokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      lendingToken: string,
      bLendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      projectToken: string,
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supply(
      lendingToken: string,
      lendingTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrow(
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDepositedProjectToken(
      projectToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOutstanding(
      account: string,
      projectToken: string,
      lendingToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateInterestInBorrowPositions(
      account: string,
      lendingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      projectToken: string,
      lendingToken: string,
      projectTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
